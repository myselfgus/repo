// Este script instala as depend√™ncias necess√°rias e configura o GenAIScript
// para uso no contexto do HEALTH/HEALTH e IREAJE.cloud

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Obter diret√≥rio atual
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Iniciando implanta√ß√£o do GenAIScript para HEALTH/HEALTH...');

// Verificar depend√™ncias necess√°rias
const dependencies = ['typescript', 'ts-node', 'nodemon'];
const packageJsonPath = path.join(__dirname, 'package.json');

// Criar package.json se n√£o existir
if (!fs.existsSync(packageJsonPath)) {
  console.log('üìù Criando package.json...');
  
  const packageJson = {
    "name": "health-health-genaiscript",
    "version": "1.0.0",
    "description": "GenAIScript para framework HEALTH/HEALTH e IREAJE.cloud",
    "type": "module",
    "main": "index.mjs",
    "scripts": {
      "start": "node index.mjs",
      "dev": "nodemon index.mjs",
      "test": "node test-genai.mjs"
    },
    "author": "GUS",
    "license": "MIT",
    "dependencies": {},
    "devDependencies": {}
  };
  
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ package.json criado com sucesso!');
}

// Instalar depend√™ncias
console.log('üì¶ Instalando depend√™ncias necess√°rias...');
try {
  for (const dep of dependencies) {
    console.log(`üì¶ Instalando ${dep}...`);
    execSync(`npm install --save-dev ${dep}`, { stdio: 'inherit' });
  }
  console.log('‚úÖ Depend√™ncias instaladas com sucesso!');
} catch (error) {
  console.error('‚ùå Erro ao instalar depend√™ncias:', error);
  process.exit(1);
}

// Criar arquivo index.mjs para facilitar uso
const indexPath = path.join(__dirname, 'index.mjs');
if (!fs.existsSync(indexPath)) {
  console.log('üìù Criando arquivo index.mjs...');
  
  const indexContent = `// HEALTH/HEALTH GenAIScript - Interface Unificada
import healthCommands from './genaisrc/health-health-commands.mts';
import { processarComando } from './genaisrc/health-health-commands.mts';

// Comandos dispon√≠veis para refer√™ncia r√°pida
const COMANDOS = {
  '$fundamentos:': 'Informa√ß√µes sobre fundamentos do framework HEALTH/HEALTH',
  '$dimensoes:': 'Explica√ß√µes sobre as dimens√µes do espa√ßo mental',
  '$visualizacao:': 'Detalhes sobre o sistema de visualiza√ß√£o (radar dimensional, etc.)',
  '$processamento:': 'Informa√ß√µes sobre o pipeline de processamento',
  '$documentacao:': 'Acesso √† documenta√ß√£o do HEALTH/HEALTH',
  '$matematica:': 'Explica√ß√µes sobre os fundamentos matem√°ticos',
  '$ia:': 'Informa√ß√µes sobre integra√ß√£o com IA',
  '$clinica:': 'Detalhes de aplica√ß√£o cl√≠nica',
  '$exemplo:': 'Exemplos de uso',
  '$help': 'Lista todos os comandos dispon√≠veis',
  '$ajuda': 'Alias para $help'
};

export { COMANDOS };

// Expor fun√ß√£o processarComando como principal
export default async function(comando) {
  return await processarComando(comando);
}

// Se executado diretamente, mostrar informa√ß√µes de uso
if (import.meta.url === \`file://\${process.argv[1]}\`) {
  console.log('üìä HEALTH/HEALTH GenAIScript - Interface de Comandos');
  console.log('Comandos dispon√≠veis:');
  
  for (const [cmd, desc] of Object.entries(COMANDOS)) {
    console.log(\`  \${cmd} \${desc}\`);
  }
  
  console.log('\\nExemplo de uso:');
  console.log('  const genai = await import("./index.mjs");');
  console.log('  const resposta = await genai.default("$dimensoes: Val√™ncia Emocional");');
}
`;
  
  fs.writeFileSync(indexPath, indexContent);
  console.log('‚úÖ index.mjs criado com sucesso!');
}

// Criar interface CLI para facilitar uso via linha de comando
const cliPath = path.join(__dirname, 'cli.mjs');
if (!fs.existsSync(cliPath)) {
  console.log('üìù Criando interface CLI...');
  
  const cliContent = `#!/usr/bin/env node
// CLI para HEALTH/HEALTH GenAIScript

import { processarComando } from './genaisrc/health-health-commands.mts';

async function main() {
  // Obter comando da linha de comando
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('‚ùå Nenhum comando fornecido. Use $help para ver comandos dispon√≠veis.');
    console.log('Exemplo: node cli.mjs "$fundamentos: O que √© HEALTH/HEALTH?"');
    process.exit(1);
  }
  
  // Reconstruir o comando completo (caso tenha espa√ßos)
  const comando = args.join(' ');
  
  try {
    console.log('üîç Processando comando:', comando);
    const resultado = await processarComando(comando);
    console.log('\\nüìä Resultado:\\n');
    console.log(resultado);
  } catch (error) {
    console.error('‚ùå Erro ao processar comando:', error);
    process.exit(1);
  }
}

main();
`;
  
  fs.writeFileSync(cliPath, cliContent);
  console.log('‚úÖ CLI criado com sucesso!');
}

// Criar arquivo README.md com instru√ß√µes de uso
const readmePath = path.join(__dirname, 'GENAISCRIPT-README.md');
if (!fs.existsSync(readmePath)) {
  console.log('üìù Criando documenta√ß√£o...');
  
  const readmeContent = `# GenAIScript para HEALTH/HEALTH

Este √© um sistema de interface de comandos espec√≠fico para o framework HEALTH/HEALTH e integra√ß√£o com IREAJE.cloud.

## Instala√ß√£o

\`\`\`bash
npm install
\`\`\`

## Uso B√°sico

### Via CLI

\`\`\`bash
node cli.mjs "$fundamentos: O que √© o HEALTH/HEALTH?"
\`\`\`

### Em C√≥digo JavaScript

\`\`\`javascript
import genai from './index.mjs';

async function main() {
  // Uso com comando espec√≠fico
  const resultado = await genai('$dimensoes: Explique a Val√™ncia Emocional');
  console.log(resultado);
  
  // Consulta geral (sem prefixo $)
  const resposta = await genai('Como o radar dimensional representa a intensidade afetiva?');
  console.log(resposta);
}

main();
\`\`\`

## Comandos Dispon√≠veis

- \`$fundamentos:\` - Informa√ß√µes sobre fundamentos do framework HEALTH/HEALTH
- \`$dimensoes:\` - Explica√ß√µes sobre as dimens√µes do espa√ßo mental
- \`$visualizacao:\` - Detalhes sobre o sistema de visualiza√ß√£o (radar dimensional, etc.)
- \`$processamento:\` - Informa√ß√µes sobre o pipeline de processamento
- \`$documentacao:\` - Acesso √† documenta√ß√£o do HEALTH/HEALTH
- \`$matematica:\` - Explica√ß√µes sobre os fundamentos matem√°ticos
- \`$ia:\` - Informa√ß√µes sobre integra√ß√£o com IA
- \`$clinica:\` - Detalhes de aplica√ß√£o cl√≠nica
- \`$exemplo:\` - Exemplos de uso
- \`$help\` - Lista todos os comandos dispon√≠veis
- \`$ajuda\` - Alias para $help

## Integra√ß√£o com Runtime Euleriano

O GenAIScript se integra ao Runtime Euleriano atrav√©s do sistema de handlers, permitindo processamento especializado para diferentes tipos de consultas.

## Rela√ß√£o com DSLs do IREAJE.cloud

O GenAIScript facilita a tradu√ß√£o entre o modelo vetorial-dimensional do HEALTH/HEALTH e as diversas DSLs:

- \`.aje\` - Formato JSON para eventos estruturados
- \`.ire\` - Formato JSON para intera√ß√µes detalhadas
- \`.e\` - Formato pipe-delimitado para eventos simplificados

Para mais informa√ß√µes, consulte a documenta√ß√£o completa do HEALTH/HEALTH e IREAJE.cloud.
\`;
  
  fs.writeFileSync(readmePath, readmeContent);
  console.log('‚úÖ Documenta√ß√£o criada com sucesso!');
}

console.log('üéâ Implanta√ß√£o do GenAIScript conclu√≠da!');
console.log('Para usar, execute:');
console.log('  node cli.mjs "$help"');
console.log('Ou importe em seu c√≥digo:');
console.log('  import genai from "./index.mjs";');
