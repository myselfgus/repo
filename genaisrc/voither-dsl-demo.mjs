// IREAJE.cloud DSL Demonstra√ß√£o - Visualizador e Interpretador
// Este script demonstra o uso das DSLs do sistema IREAJE.cloud (.aje, .ire, .e)
// e sua integra√ß√£o com o framework HEALTH/HEALTH

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { IreajeConverter } from './ireaje-format-converter.mjs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Classe de demonstra√ß√£o das DSLs do IREAJE.cloud
class IreajeDSLDemo {
  constructor() {
    // Formatos implementados (pr√°ticos)
    this.practicalDSLs = {
      'aje': 'Formato JSON estruturado para eventos (implementa√ß√£o pr√°tica)',
      'ire': 'Formato JSON para intera√ß√µes detalhadas (implementa√ß√£o pr√°tica)',
      'e': 'Formato pipe-delimitado para eventos simplificados (implementa√ß√£o pr√°tica)'
    };
    
    // Formatos te√≥ricos (prova de conceito)
    this.theoreticalDSLs = {
      'Re.aje': 'Formato Re{EventType} te√≥rico (prova de conceito)',
      'Re.ire': 'Formato MonitorEvent.ire te√≥rico (prova de conceito)',
      'Re.e': 'Formato Flow Euleriano te√≥rico (prova de conceito)'
    };
    
    // Todas as extens√µes de DSLs suportadas
    this.practicalExtensions = Object.keys(this.practicalDSLs).map(ext => `.${ext}`);
    this.theoreticalExtensions = Object.keys(this.theoreticalDSLs).map(ext => `.${ext}`);
    this.allExtensions = [...this.practicalExtensions, ...this.theoreticalExtensions];
  }
    // Explicar os formatos das DSLs
  explainDSLs() {
    return `
üìö DSLs do IREAJE.cloud

O sistema IREAJE.cloud utiliza m√∫ltiplas Domain-Specific Languages (DSLs) para representar
e processar diferentes aspectos das intera√ß√µes e eventos. Estas linguagens foram projetadas
para diferentes n√≠veis de abstra√ß√£o e uso:

üìã IMPLEMENTA√á√ïES PR√ÅTICAS (UTILIZADAS NO C√ìDIGO)

1. **.aje (Automated JSON Events)**
   - Formato: JSON estruturado
   - Foco: Registro detalhado de eventos individuais
   - Uso principal: An√°lise granular e processamento automatizado
   - Estrutura: Organizada em "session" e "events" com metadados detalhados
   - Compatibilidade: Facilmente process√°vel por sistemas baseados em JSON

2. **.ire (Interaction Record Enhanced)**
   - Formato: JSON estruturado 
   - Foco: Intera√ß√µes completas (par requisi√ß√£o-resposta)
   - Uso principal: An√°lise de di√°logos e rastreamento de intera√ß√µes
   - Estrutura: Organizada em "session" e "interactions" com detalhes de requisi√ß√£o/resposta
   - Compatibilidade: Ideal para visualiza√ß√£o e an√°lise em ferramentas de dashboard

3. **.e (Events)**
   - Formato: Texto pipe-delimitado
   - Foco: Eventos simplificados para logging compacto
   - Uso principal: Logs de sistema e processamento eficiente
   - Estrutura: Cada linha representa um evento com campos separados por pipe
   - Compatibilidade: Facilmente process√°vel por ferramentas de linha de comando e an√°lise de logs

üìò FORMATOS TE√ìRICOS (PROVAS DE CONCEITO)

4. **Re{EventType}.aje (Registro Avan√ßado)**
   - Formato: Definido na documenta√ß√£o IREAJE.cloud, implementado como prova de conceito
   - Foco: Representa√ß√£o formal de eventos para processamento por Runtime Euleriano
   - Status: Implementa√ß√£o te√≥rica baseada na documenta√ß√£o

5. **MonitorEvent.ire (Correla√ß√£o e Monitoramento)**
   - Formato: Definido na documenta√ß√£o IREAJE.cloud, implementado como prova de conceito 
   - Foco: Detec√ß√£o de correla√ß√µes e monitoramento de processos
   - Status: Implementa√ß√£o te√≥rica baseada na documenta√ß√£o

6. **Flow.e (Fluxo Euleriano)**
   - Formato: Definido na documenta√ß√£o IREAJE.cloud, implementado como prova de conceito
   - Foco: Defini√ß√£o de sequ√™ncias e fluxos de execu√ß√£o
   - Status: Implementa√ß√£o te√≥rica baseada na documenta√ß√£o

Ambos os conjuntos de DSLs s√£o complementares, com os formatos pr√°ticos sendo usados no c√≥digo
atual, enquanto os formatos te√≥ricos representam implementa√ß√µes de prova de conceito baseados
na documenta√ß√£o oficial do IREAJE.cloud.
`;
  }
  
  // Explicar a sintaxe espec√≠fica de cada DSL
  explainSyntax(dslName) {
    dslName = dslName.toLowerCase().replace('.', '');
    
    if (dslName === 'aje') {
      return `
üìù Sintaxe da DSL .aje (Automated JSON Events)

\`\`\`json
{
  "session": {
    "id": "health-health-20250513",
    "start_time": "2025-05-13T03:26:09Z",
    "end_time": "2025-05-13T08:26:09Z",
    "user": "GUS",
    "project": "vintra-healthhealth"
  },
  "events": [
    {
      "id": "e01",
      "timestamp": "2025-05-13T03:28:05Z",
      "type": "request",
      "content": "sugest√£o de script para GenAI",
      "metadata": {
        "project_context": "HEALTH/HEALTH",
        "file_target": "genaisrc/.genai.mts"
      }
    },
    {
      "id": "e02",
      "timestamp": "2025-05-13T04:15:22Z",
      "type": "response",
      "content": "Script implementado com sucesso",
      "metadata": {
        "ref": "e01",
        "status": "success",
        "duration": 296
      }
    }
  ]
}
\`\`\`

Elementos principais:
- \`session\`: Informa√ß√µes da sess√£o (id, hor√°rios, usu√°rio, projeto)
- \`events\`: Array de eventos individuais, cada um com:
  - \`id\`: Identificador √∫nico do evento
  - \`timestamp\`: Data/hora ISO8601
  - \`type\`: Tipo de evento (request, response, error, etc.)
  - \`content\`: Conte√∫do principal do evento
  - \`metadata\`: Dados adicionais espec√≠ficos do tipo de evento
`;
    } 
    else if (dslName === 'ire') {
      return `
üìù Sintaxe da DSL .ire (Interaction Record Enhanced)

\`\`\`json
{
  "session": {
    "id": "HEALTH-HEALTH-20250513",
    "start": "2025-05-13T03:26:09Z",
    "end": "2025-05-13T08:26:09Z",
    "user": "GUS",
    "workspace": "C:/Users/GUS/Desktop/vintra-healthhealth"
  },
  "interactions": [
    {
      "id": "INT-001",
      "timestamp": "2025-05-13T03:28:05Z",
      "request": {
        "type": "IMPLEMENTATION",
        "subject": "GenAI Script Creation",
        "target": "genaisrc/.genai.mts",
        "content": "sugest√£o de script para GenAI especializado para HEALTH/HEALTH"
      },
      "response": {
        "type": "CODE",
        "status": "SUCCESS",
        "content": "Script implementado para an√°lise dimensional",
        "duration": 160
      }
    }
  ]
}
\`\`\`

Elementos principais:
- \`session\`: Informa√ß√µes da sess√£o (id, hor√°rios, usu√°rio, workspace)
- \`interactions\`: Array de intera√ß√µes completas, cada uma com:
  - \`id\`: Identificador √∫nico da intera√ß√£o
  - \`timestamp\`: Data/hora ISO8601
  - \`request\`: Detalhes da requisi√ß√£o (type, subject, target, content)
  - \`response\`: Detalhes da resposta (type, status, content, duration)
`;
    } 
    else if (dslName === 'e') {
      return `
üìù Sintaxe da DSL .e (Events)

\`\`\`
EVENT_SESSION_START|2025-05-13T03:26:09Z|USER:GUS|PROJECT:vintra-healthhealth|DURATION:18000
EVENT_REQUEST|2025-05-13T03:28:05Z|TYPE:IMPLEMENTATION|TARGET:genaisrc/.genai.mts|CONTENT:sugest√£o de script para GenAI
EVENT_RESPONSE|2025-05-13T03:30:45Z|TYPE:CODE|STATUS:SUCCESS|DURATION:160|REF:e01
EVENT_FILE_CREATE|2025-05-13T03:40:12Z|PATH:genaisrc/.genai.mts|TYPE:SCRIPT|SIZE:4582
EVENT_SESSION_END|2025-05-13T08:33:24Z|TOTAL_INTERACTIONS:10|SUCCESS_RATE:0.9|FILES_CREATED:6|FILES_MODIFIED:2
EOF
\`\`\`

Elementos principais:
- Cada linha representa um evento
- Campos separados por pipe (|)
- Primeiro campo √© o tipo de evento (EVENT_SESSION_START, EVENT_REQUEST, etc.)
- Campos subsequentes s√£o pares chave:valor espec√≠ficos do tipo de evento
- Termina com EOF

Tipos de eventos comuns:
- EVENT_SESSION_START: In√≠cio de sess√£o
- EVENT_SESSION_END: Fim de sess√£o
- EVENT_REQUEST: Solicita√ß√£o do usu√°rio
- EVENT_RESPONSE: Resposta do sistema
- EVENT_ERROR: Erro durante processamento
- EVENT_FILE_*: Opera√ß√µes em arquivos (CREATE, MODIFY, ACCESS)
- EVENT_COMMAND: Comandos executados
`;
    } 
    else {
      return `DSL '${dslName}' n√£o reconhecida. DSLs suportadas: aje, ire, e`;
    }
  }
  
  // Demonstrar integra√ß√£o entre GenAIScript e DSLs
  explainIntegration() {
    return `
üîÑ Integra√ß√£o GenAIScript & DSLs IREAJE.cloud

O GenAIScript e as DSLs do IREAJE.cloud trabalham em conjunto da seguinte forma:

1. **Fluxo de Trabalho**
   - O GenAIScript processa comandos com prefixo \`$\` (ex: \`$dimensoes: Val√™ncia Emocional\`)
   - O Runtime Euleriano coordena o processamento atrav√©s de handlers especializados
   - As opera√ß√µes s√£o registradas em logs usando os formatos DSL (.aje, .ire, .e)

2. **Transforma√ß√£o de Representa√ß√µes**
   - Vetores Dimensionais (HEALTH/HEALTH) ‚Üí Express√µes DSL (IREAJE.cloud)
   - Programas DSL ‚Üí Trajet√≥rias Dimensionais
   - O Compilador Dimensional-DSL atua como ponte entre estes sistemas

3. **Casos de Uso**
   - **An√°lise Cl√≠nica:** Registrar intera√ß√µes em .aje para an√°lise detalhada
   - **Supervis√£o:** Converter para .ire para visualiza√ß√£o de intera√ß√µes completas
   - **Auditoria:** Usar formato .e para logs compactos e f√°cil processamento

4. **Exemplo Pr√°tico**
   \`\`\`javascript
   // 1. Processar comando via GenAIScript
   import genai from './index.mjs';
   const resultado = await genai('$dimensoes: Val√™ncia Emocional');
   
   // 2. Registrar em formatos DSL
   import { IreajeConverter } from './ireaje-tools.mjs';
   
   // Criar registro .aje
   const ajeData = {
     session: {
       id: \`health-health-\${Date.now()}\`,
       start_time: new Date().toISOString(),
       user: "SYSTEM"
     },
     events: [
       {
         id: "e01",
         timestamp: new Date().toISOString(),
         type: "request",
         content: "$dimensoes: Val√™ncia Emocional"
       },
       {
         id: "e02",
         timestamp: new Date().toISOString(),
         type: "response",
         content: resultado.substring(0, 100) + "..."
       }
     ]
   };
   
   // Converter para outros formatos
   const ireData = IreajeConverter.ajeToIre(ajeData);
   const eContent = IreajeConverter.ireToE(ireData);
   \`\`\`

5. **Benef√≠cios da Integra√ß√£o**
   - Rastreabilidade completa das intera√ß√µes
   - M√∫ltiplas representa√ß√µes para diferentes necessidades
   - Capacidade de an√°lise em diferentes n√≠veis de granularidade
   - Compatibilidade com sistemas de processamento automatizado
`;
  }
  
  // Procurar exemplos no diret√≥rio
  findDSLExamples(directory = '.') {
    const examples = {};
    
    try {
      const files = fs.readdirSync(directory, { recursive: true });
      
      for (const ext of this.extensions) {
        examples[ext.substring(1)] = files
          .filter(file => file.toLowerCase().endsWith(ext))
          .map(file => path.join(directory, file));
      }
      
      return examples;
    } catch (error) {
      console.error(`Erro ao buscar exemplos: ${error.message}`);
      return {};
    }
  }
  
  // Visualizar arquivo DSL
  viewDSLFile(filePath) {
    if (!fs.existsSync(filePath)) {
      return `Arquivo n√£o encontrado: ${filePath}`;
    }
    
    const ext = path.extname(filePath).toLowerCase();
    if (!this.extensions.includes(ext)) {
      return `Formato n√£o suportado: ${ext}. Formatos suportados: ${this.extensions.join(', ')}`;
    }
    
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      
      // Para formatos JSON, fazer parse e exibir formatado
      if (ext === '.aje' || ext === '.ire') {
        try {
          const parsed = JSON.parse(content);
          return JSON.stringify(parsed, null, 2);
        } catch (e) {
          return `Erro ao fazer parse do JSON: ${e.message}\n\nConte√∫do bruto:\n${content}`;
        }
      }
      
      // Para formato .e, exibir como est√°
      return content;
    } catch (error) {
      return `Erro ao ler arquivo: ${error.message}`;
    }
  }
  
  // Converter arquivo entre formatos
  convertDSLFile(sourcePath, targetFormat) {
    try {
      return IreajeConverter.convertFile(sourcePath, targetFormat);
    } catch (error) {
      return `Erro ao converter: ${error.message}`;
    }
  }
}

// Exportar classe demo
export { IreajeDSLDemo };

// Fun√ß√£o principal para linha de comando
async function main() {
  const demo = new IreajeDSLDemo();
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log(`
üìö IREAJE.cloud DSL Demonstra√ß√£o

Uso: node ireaje-dsl-demo.mjs <comando> [par√¢metros]

Comandos:
  explain                 Explica√ß√£o geral das DSLs do IREAJE.cloud
  syntax <dsl>            Explica√ß√£o da sintaxe de uma DSL espec√≠fica (aje, ire, e)
  integration             Explica√ß√£o da integra√ß√£o com GenAIScript
  examples [diret√≥rio]    Encontrar exemplos de arquivos DSL
  view <arquivo>          Visualizar conte√∫do de um arquivo DSL
  convert <arquivo> <dsl> Converter arquivo para outro formato DSL

Exemplos:
  node ireaje-dsl-demo.mjs explain
  node ireaje-dsl-demo.mjs syntax aje
  node ireaje-dsl-demo.mjs examples ./loggin.aje.ire.e
  node ireaje-dsl-demo.mjs view ./loggin.aje.ire.e/health-health-session-log.aje
  node ireaje-dsl-demo.mjs convert ./loggin.aje.ire.e/health-health-session-log.aje ire
`);
    process.exit(0);
  }
  
  const command = args[0].toLowerCase();
  
  switch (command) {
    case 'explain':
      console.log(demo.explainDSLs());
      break;
    
    case 'syntax':
      if (args.length < 2) {
        console.error('‚ùå Especifique qual DSL (aje, ire, e)');
        process.exit(1);
      }
      console.log(demo.explainSyntax(args[1]));
      break;
    
    case 'integration':
      console.log(demo.explainIntegration());
      break;
    
    case 'examples':
      const directory = args[1] || '.';
      const examples = demo.findDSLExamples(directory);
      console.log('üìÅ Exemplos de DSLs encontrados:');
      
      for (const [format, files] of Object.entries(examples)) {
        console.log(`\n.${format} (${files.length} arquivos):`);
        for (const file of files) {
          console.log(`  - ${file}`);
        }
      }
      break;
    
    case 'view':
      if (args.length < 2) {
        console.error('‚ùå Especifique o caminho do arquivo');
        process.exit(1);
      }
      console.log(demo.viewDSLFile(args[1]));
      break;
    
    case 'convert':
      if (args.length < 3) {
        console.error('‚ùå Especifique o arquivo fonte e o formato alvo');
        process.exit(1);
      }
      const result = demo.convertDSLFile(args[1], args[2]);
      console.log(`‚úÖ Arquivo convertido: ${result}`);
      break;
    
    default:
      console.error(`‚ùå Comando n√£o reconhecido: ${command}`);
      process.exit(1);
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
